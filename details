"use client";
import Image from "next/image";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { useState, useEffect, useRef } from "react";
import { CiShoppingTag } from "react-icons/ci";
import { IoCarSportOutline } from "react-icons/io5";
import { IoSpeedometerOutline } from "react-icons/io5";
import { PiGasPump } from "react-icons/pi";
import { SlCalender } from "react-icons/sl";
import { GiGearStickPattern } from "react-icons/gi";
import { PiSteeringWheelLight } from "react-icons/pi";
import { PiEngineLight } from "react-icons/pi";
import { IoColorFillOutline } from "react-icons/io5";
import { IoIosBarcode } from "react-icons/io";
import { GiCarDoor } from "react-icons/gi";
import { PiCylinder } from "react-icons/pi";
import { GiSpeedometer } from "react-icons/gi";
import { LuFuel } from "react-icons/lu";
import { CiBookmark } from "react-icons/ci";
import { PiArrowUpRightThin } from "react-icons/pi";
import { IoChevronBack, IoChevronForward } from "react-icons/io5";
import Model from "@/components/model/Model";

const ModelDetails = () => {
  const pathname = usePathname();
  const id = pathname.split("/").pop();

  if (!id) {
    return <div className="text-center">No ID provided</div>;
  }

  const [model, setModel] = useState(null);
  const [similarModels, setSimilarModels] = useState([]);
  const scrollContainerRef = useRef(null);
  const [currentImage, setCurrentImage] = useState([]);
  useEffect(() => {
    const fetchModelData = async () => {
      try {
        // Fetch details of the current model
        const modelResponse = await fetch(
          `http://localhost:3000/api/carmodels/${id}`
        );
        if (!modelResponse.ok) {
          throw new Error("Failed to fetch model data");
        }
        const modelData = await modelResponse.json();
        setModel(modelData.model);

        // Fetch all car models
        const allModelsResponse = await fetch(
          `http://localhost:3000/api/carmodels`
        );
        if (!allModelsResponse.ok) {
          throw new Error("Failed to fetch all car models");
        }
        const allModelsData = await allModelsResponse.json();

        // Filter similar models based on the year of the current model
        const similarModelsFiltered = allModelsData.carListing.filter(
          (similarModel) =>
            similarModel.year === modelData.model.year &&
            similarModel._id !== id
        );
        setSimilarModels(similarModelsFiltered);

        // Set the current image once the model data is fetched
        setCurrentImage(modelData.model.exteriorImages[0]);
      } catch (error) {
        console.error("Error fetching model:", error);
      }
    };

    fetchModelData();
  }, [id]);

  if (!model) {
    return <div className="text-center">Loading...</div>;
  }

  const handleClickThumbnail = (image) => {
    setCurrentImage(image);
  };

  // Function to handle scrolling left
  const scrollLeft = () => {
    if (scrollContainerRef.current) {
      scrollContainerRef.current.scrollBy({
        left: -300, // Adjust scroll distance as needed
        behavior: "smooth",
      });
    }
  };

  // Function to handle scrolling right
  const scrollRight = () => {
    if (scrollContainerRef.current) {
      scrollContainerRef.current.scrollBy({
        left: 300, // Adjust scroll distance as needed
        behavior: "smooth",
      });
    }
  };
 // Audio component
const AudioComponent = ({ src }) => {
  const audioRef = useRef(null);

  // State for controlling audio playback
  const [isPlaying, setIsPlaying] = useState(false);
  const [showLogo, setShowLogo] = useState(false);

  // Function to handle the click event to start audio playback
  const startAudio = () => {
    setIsPlaying(true);
    setShowLogo(true);
  };

  // Function to handle the click event to stop audio playback
  const stopAudio = () => {
    setIsPlaying(false);
    setShowLogo(false);
  };

  // Function to handle the end of audio playback
  const handleAudioEnd = () => {
    setIsPlaying(false);
    setShowLogo(false);
  };

  // Effect for controlling audio playback
  useEffect(() => {
    const audioElement = audioRef.current;

    // If isPlaying is true, start playing the audio
    if (isPlaying) {
      audioElement.play();
    } else {
      audioElement.pause();
    }

    // If audio playback is stopped and user clicks "Start", reset audio to beginning
    if (!isPlaying && audioElement.currentTime > 0) {
      audioElement.currentTime = 0;
    }
  }, [isPlaying]);

  return (
    <div className="border-8 border-red-600 px-8 py-4 mt-4 rounded-full bg-zinc flex justify-center items-center w-fit">
      <div className="flex flex-col items-center">
        {/* Button to start audio playback */}
        <button
          onClick={startAudio}
          className={`mb-2 text-gray-300 focus:text-red-500 font-semibold text-2xl py-2 px-4 transition delay-100 ${showLogo ? 'hidden' : ''}`}
          disabled={showLogo}
        >
          Start
        </button>
        <div className="h-1 w-10 bg-red-600"></div>
        {/* Button to stop audio playback */}
        <button
          onClick={stopAudio}
          className={`mt-2 text-gray-300 active:text-red-500 font-semibold text-2xl py-2 px-4 transition delay-200 ${!showLogo ? 'hidden' : ''}`}
          disabled={!showLogo}
        >
          Stop
        </button>
      </div>
      {showLogo && (
        <div className="flex justify-center items-center">
          <img
            src='/benz.png'
            alt="Mercedes Benz Logo"
            className="w-20 h-auto animate-spin"
          />
        </div>
      )}

      {/* Hidden audio element for playing the audio */}
      <audio ref={audioRef} src={src} onEnded={handleAudioEnd} />
    </div>
  );
};

  return (
    <div className="container mx-auto my-40 px-4">
      {/* Main content */}
      <h2 className="text-zinc font-mercedes-light text-5xl">
        {model.listingTitle}
      </h2>
      <h2 className="text-gray-800 font-noraml text-xl mt-2">{model.model}</h2>
      <div className="flex flex-col gap-10 mt-10 ">
        {/* Image section */}
        <div className="flex justify-between gap-10 w-full items-start sm:flex-col md:flex-row">
          <div className="md:w-2/3 sm:w-full">
            <Image
              src={currentImage}
              alt={model?.model}
              width={800}
              height={600}
              className="w-full object-cover bg-white"
            />
            {/* Image thumbnails */}
            {model?.exteriorImages.length > 1 && (
              <div className="flex gap-2 overflow-x-scroll py-2">
                {model?.exteriorImages.map((image, index) => (
                  <Image
                    key={index}
                    src={image}
                    alt={model?.model}
                    width={120}
                    height={90}
                    className="object-cover bg-gray-300 cursor-pointer rounded"
                    onClick={() => handleClickThumbnail(image)}
                  />
                ))}
              </div>
            )}
          </div>
          {/* Sidebar for additional details */}
          <div className=" px-8 py-4 md:w-1/3 sm:w-full bg-whit shadow-md bg-white">
            <div className="flex flex-col gap-4">
              <div>
                <h2 className="font-semibold text-gray-700 text-xl pb-2">
                  Prix
                </h2>
                <p className="text-zinc font-semibold text-3xl">
                  ${model?.price}
                </p>
                <Link
                  href={`/listing/purchase?id=${model?._id}`}
                  className="text-white hover:underline mt-8  w-full text-center bg-blue-500 rounded px-4 py-4 flex items-center justify-center gap-2"
                >
                  <CiShoppingTag className="h-6 w-6" />
                  Passer à l'achat
                </Link>
              </div>

              {/* Additional details */}
              <div className="flex flex-col gap-4">
                {/* Map over additional details */}
                {/* Example */}

                <div className=" flex items-center justify-between gap-2 mt-5">
                  <div className=" flex items-center justify-between gap-2">
                    <IoCarSportOutline className="h-6 w-6 text-gray-800" />
                    <p className="font-medium text-gray-800">Type</p>
                  </div>
                  <span className="font-medium">{model.type}</span>
                </div>
                <div className="border-t border-gray-300 my-2" />
                <div className=" flex items-center justify-between gap-2 ">
                  <div className=" flex items-center justify-between gap-2">
                    <IoSpeedometerOutline className="h-6 w-6 text-gray-800" />
                    <p className="font-medium text-gray-800">Kilométrage</p>
                  </div>
                  <span className="font-medium">{model.mileage}</span>
                </div>
                <div className="border-t border-gray-300 my-2" />
                <div className=" flex items-center justify-between gap-2">
                  <div className=" flex items-center justify-between gap-2">
                    <PiGasPump className="h-6 w-6 text-gray-800" />
                    <p className="font-medium text-gray-800">
                      Type de carburant
                    </p>
                  </div>
                  <span className="font-medium">{model.fuelType}</span>
                </div>
                <div className="border-t border-gray-300 my-2" />
                <div className=" flex items-center justify-between gap-2">
                  <div className=" flex items-center justify-between gap-2">
                    <SlCalender className="h-6 w-6 text-gray-800" />
                    <p className="font-medium text-gray-800">Année</p>
                  </div>
                  <span className="font-medium">{model.year}</span>
                </div>
                <div className="border-t border-gray-300 my-2" />
                <div className=" flex items-center justify-between gap-2">
                  <div className=" flex items-center justify-between gap-2">
                    <GiGearStickPattern className="h-6 w-6 text-gray-800" />
                    <p className="font-medium text-gray-800">Transmission</p>
                  </div>
                  <span className="font-medium">{model.transmission}</span>
                </div>
                <div className="border-t border-gray-300 my-2" />
                <div className=" flex items-center justify-between gap-2">
                  <div className=" flex items-center justify-between gap-2">
                    <PiSteeringWheelLight className="h-6 w-6 text-gray-800" />
                    <p className="font-medium text-gray-800">
                      Type de conduite
                    </p>
                  </div>
                  <span className="font-medium">{model.driveType}</span>
                </div>
                <div className="border-t border-gray-300 my-2" />
                <div className=" flex items-center justify-between gap-2">
                  <div className=" flex items-center justify-between gap-2">
                    <PiEngineLight className="h-6 w-6 text-gray-800" />
                    <p className="font-medium text-gray-800">
                      Taille du moteur
                    </p>
                  </div>
                  <span className="font-medium">{model.engineSize}</span>
                </div>
                <div className="border-t border-gray-300 my-2" />
                <div className=" flex items-center justify-between gap-2">
                  <div className=" flex items-center justify-between gap-2">
                    <PiCylinder className="h-6 w-6 text-gray-800" />
                    <p className="font-medium text-gray-800">Cylinders</p>
                  </div>
                  <span className="font-medium">{model.cylinders}</span>
                </div>
                <div className="border-t border-gray-300 my-2" />
                <div className=" flex items-center justify-between gap-2">
                  <div className=" flex items-center justify-between gap-2">
                    <GiCarDoor className="h-6 w-6 text-gray-800" />
                    <p className="font-medium text-gray-800">Portes</p>
                  </div>
                  <span className="font-medium">{model.doors}-portes</span>
                </div>
                <div className="border-t border-gray-300 my-2" />
                <div className=" flex items-center justify-between gap-2">
                  <div className=" flex items-center justify-between gap-2">
                    <IoColorFillOutline className="h-6 w-6 text-gray-800" />
                    <p className="font-medium text-gray-800">Couleur</p>
                  </div>
                  <span className="font-medium">{model.color}</span>
                </div>
                <div className="border-t border-gray-300 my-2" />
                <div className=" flex items-center justify-between gap-2">
                  <div className=" flex items-center justify-between gap-2">
                    <IoIosBarcode className="h-6 w-6 text-gray-800" />
                    <p className="font-medium text-gray-800">Numéro de VIN</p>
                  </div>
                  <span className="font-medium">{model.vin}</span>
                </div>
                {/* More additional details */}
                {/* ... */}
              </div>
            </div>
          </div>
        </div>

        {/* Features section */}
        <div className="border border-gray-300 p-4">
          <h2 className="font-semibold text-xl pb-2">Fonctionnalités</h2>
          <div className="flex flex-wrap gap-2">
            {model?.features.map((feature, index) => (
              <p key={index} className="text-gray-700 border px-3 py-2 rounded">
                {feature}
              </p>
            ))}
          </div>
        </div>

        {/* Safety Features section */}
        <div className="border border-gray-300 p-4">
          <h2 className="font-semibold text-xl pb-2">
            Fonctionnalités de sécurité
          </h2>
          <div className="flex flex-wrap gap-2">
            {model?.safetyFeatures.map((safetyFeature, index) => (
              <p key={index} className="text-gray-700 border px-3 py-2 rounded">
                {safetyFeature}
              </p>
            ))}
          </div>
        </div>

        {/* Specifications section */}
        <div className="border border-gray-300 p-4">
          <h2 className="font-semibold text-xl pb-2">Spécifications</h2>
          {/* Your specifications content */}
        </div>

        {/* Video section */}
        <div className="border border-gray-300 p-4 mt-4">
          <h2 className="font-semibold text-xl pb-2">Vidéo de démonstration</h2>
          <div className="relative w-full h-0" style={{ paddingTop: "56.25%" }}>
            {/* Replace 'video_source_url' with the URL of your video */}
            <video
              muted
              loop
              autoPlay // Add autoPlay attribute to make the video autoplay
              controls={false} // Set controls to false to hide the video controls
              className="absolute inset-0 w-full h-full"
              src="/sl2.mp4"
            />
          </div>
        </div>
        {/* Render Audio Component */}
        <div className="flex items-center justify-center">
          <AudioComponent src="/engine-start.mp3" />
        </div>
      </div>

      {/* Similar Models section */}
      <div className="border border-gray-300 p-4 mt-8">
        <h2 className="font-semibold text-xl pb-2">Modèles similaires</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {similarModels.map((similarModel) => (
            <div
              key={similarModel._id}
              className="border border-gray-300 p-2 rounded"
            >
              <CiBookmark className="h-6 w-6" />
              <Image
                src={similarModel.cardImages[0]}
                alt={similarModel.name}
                width={200}
                height={150}
                className="object-cover cursor-pointer rounded"
              />
              <h3 className="text-gray-900 font-semibold mt-2">
                {similarModel.listingTitle}
              </h3>
              <p className="text-gray-700">{similarModel.model}</p>
              {/* Additional details */}
              {/* ... */}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default ModelDetails;
